--- 
# Tiny Tapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - if_network.v
    - tt_um_seven_segment_seconds.v
  top_module:  "tt_um_manjushettar"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Manju Shettar"      # Your name
  title:        "ECE 183 - Integrate and Fire Network Chip Design"      # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Count up to 10, one second at a time."      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      This project emulates a two-layer neural network using a series of integrate and fire neurons defined in Verilog. The neurons accumulate incoming spikes and when their cummulative signal surpasses a defined threshold, they generate a spike and reset their potential.

      The network is composed of two neuron layers. The first input layer accepts two 16-bit inputs, corresponding to external stimuli or current, which the neurons of the first layer will processes. Based on the internal states of these neurons, they may or may not fire to generate spikes. 

      The spikes that are generated from the first layer are used as input to the second layer. In this model, a spike is defined asw a binary high signal, translated into a 16-bit value to mimic the input current standard. If there is no spike, there is no input current (zero).

      The second layer defines the neural network's output. Each neuron in the second layer may generate a spike, which is represented again with a bit. 
# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Testing involves applying different input stimuli (current) and observing spiking states.

      By changing the values of 'input1' and 'input2', and observing the output layers, we can observe different spiking outputs from the neural network.  


# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - "input1[15:0]": "16-bit stimulus input to the first layer's first neuron."
    - "input2[15:0]": "16-bit stimulus input to the first layer's second neuron."
    - "clk": "Clock signal."
    - "rst_n": "Reset signal; when low, it resets the neurons' current and output spikes."

# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - "output_layer2[1]": "Spiking status of the first neuron in the second layer"
    - "output_layer2[0]": "Spiking status of the second neuron in the second layer"

  bidirectional:
  - uio_in: "Reserved for future use."

# The following fields are optional
  tag:          ""      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     10000000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
