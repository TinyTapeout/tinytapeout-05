---
# Tiny Tapeout project information
project:
  wokwi_id: 0 # If using wokwi, set this to your project's ID

  # If using an HDL, set wokwi_id as 0 and uncomment and list your source files here.
  # Source files must be in ./src and you must list each source file separately
  source_files:
    - tt_um_lif.v
    - lif.v
  top_module: "tt_um_lif" # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

  # How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1" # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation:
  author: "Shatoparba Banerjee" # Your name
  title: "Current Based Leaky Integrate and Fire Model" # Project title
  language: "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description: "Implement a current based LIF neuron" # Short description of what your project does

  # Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
   Current-based LIF neurons are a simplified abstraction of the behavior of real neurons,
   and they are often used in large-scale neural network simulations due to their computational efficiency.
   These models are useful for studying the dynamics of spiking neurons and their role in information 
   processing in the brain.

  # Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test: |
   To test the current-based LIF project, follow these steps: Connect the LIF module to the input switches,
   7-segment display, and clock source as specified in the Verilog module. Use input switches to control the
   input current, and observe the 7-segment display for spike detection, while ensuring the clock signal is appropriately set to provide the desired clock frequency for the simulation.

  # A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:
    - current bit 11
    - current bit 12
    - current bit 13
    - current bit 14
    - current bit 15
    - current bit 16
    - current bit 17
    - current bit 18
  # A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - membrane potential bit a
    - membrane potential bit b
    - membrane potential bit c
    - membrane potential bit d
    - membrane potential bit e
    - membrane potential bit f
    - membrane potential bit g
    - membrane potential bit h
  # A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - spike bit 0
    - unspecified
    - unspecified
    - unspecified
    - unspecified
    - unspecified
    - unspecified
    - unspecified

  # The following fields are optional
  tag: "neuron, test" # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw: "" # Describe any external hardware needed
  discord: "" # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link: "" # URL to longer form documentation, eg the README.md in your repository
  clock_hz: 10000000 # Clock frequency in Hz (if required)
  picture: "" # relative path to a picture in your repository (must be 512kb or less)
