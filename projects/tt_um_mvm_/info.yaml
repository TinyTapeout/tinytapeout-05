--- 
# Tiny Tapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - tt_um_mvm_.v
    - mvm.v
  top_module:  "tt_um_mvm_"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Mathias Eriksen" 
  title:        "Matrix Vector Multiplication Accelerator" 
  language:     "Verilog" 
  description:  "This project takes in a 3x3 weight matrix in Compressed Sparse Row format,
                 value is quantized and 8 bits long. It also takes in the corresponding
                 3 bit spike train. It then computes the matrix vector multiplication
                 product and outputs the resulting vector on the output line"

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      Uses a set of registers and flags from the CPU to fetch the weight matrix in CSR format 
      as well as the spike train. The values are passed in one at a time, and the entire matrix
      is loaded into registers that are internal to the IC

      Once the full sparse matrix and spike train are loaded in, an algorithm is used to compute
      the resultant vector of the matrix vector multiplication of the weight matrix and the spike train

      Finally, the output vector is transmitted on the output line, along with a flag bit which flips
      each time a new value is sent out.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      After reset, send values in CSR format using the input bits described below. Send a value by toggling
      the sending CPU flag for one clock cycle while the values are in their respective registers. Repeat
      for the entire matrix, toggling the sending CPU flag low between each value. Then, check the return
      values by waiting for the sending out flag from the IC to flip. After the first flip, the other
      two values will be sent on each clock edge. 

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:  
    - Input Value bit 0             
    - Input Value bit 1
    - Input Value bit 2
    - Input Value bit 3
    - Input Value bit 4
    - Input Value bit 5
    - Input Value bit 6
    - Input Value bit 7
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - Output Value bit 0
    - Output Value bit 1 
    - Output Value bit 2
    - Output Value bit 3
    - Output Value bit 4
    - Output Value bit 5
    - Output Value bit 6
    - Output Value bit 7
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - FETCH Ready flag (out)
    - Sending out flag  (out)
    - Done sending flag (in)
    - Sending CPU flag (in)
    - Column Value bit 0
    - Column Value bit 1
    - Row Value bit 0
    - Row Value bit 1

# The following fields are optional
  tag:          "timer, test"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      "Mati_"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     10000000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
