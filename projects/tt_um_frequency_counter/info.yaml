--- 
# Tiny Tapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - tt_um_frequency_counter.v
    - frequency_counter/src/edge_detect.v
    - frequency_counter/src/frequency_counter.v
    - frequency_counter/src/seven_segment.v
  top_module:  "tt_um_frequency_counter"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Matt Venn"      # Your name
  title:        "Frequency counter"      # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "measured frequency of a signal on pin 0 and displays on the 7 segment display"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      Debounces the input signal and counts how many transistions occur in a given period. A state machine
      then divides the count by ten by repeatedly subtracting ten and then displays the tens and units on the seven segment display.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Apply a signal to the signal input and the frequency will be measured and displayed on the seven segment. The dot is used to select between display tens and units.

      To change the count period (to get accurate counts), set it to match the clock frequency.
      Set the desired period (top 8 bits of a 12 bit counter) on the bidirectional inputs and toggle load input.

      To debug, enable debug mode and check the bidirectional outputs for state machine, clock count and edge count information.

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - signal
    - debug mode (on will put debug signals on bidirectional outputs)
    - load new period. toggle this to register the value in the bidirectional inputs
    - none
    - none
    - none
    - none
    - none
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - segment a
    - segment b
    - segment c
    - segment d
    - segment e
    - segment f
    - segment g
    - digit select
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - count period bit 11 or debug edge  bit 2
    - count period bit 10 or debug edge  bit 1
    - count period bit 09 or debug edge  bit 0
    - count period bit 08 or debug clock bit 2
    - count period bit 07 or debug clock bit 1
    - count period bit 06 or debug clock bit 0
    - count period bit 05 or debug state bit 1
    - count period bit 04 or debug state bit 0

# The following fields are optional
  tag:          "utility, sensor, counter"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      "mattvenn"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     10000000       # Clock frequency in Hz (if required)
  picture:      "freq_count.jpg"      # relative path to a picture in your repository (must be 512kb or less)
