--- 
# Tiny Tapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
  - tt_um_EventFilter.v
  - EventFilter.v
# ADD MY WRITTEN SOURCE FILES HERE
  top_module:  "tt_um_EventFilter"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Emily Lee"      # Your name
  title:        "Event Denoising Circuit"      # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Implementing a Denoiser for Event Based Data in Silicon" # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
    The 8 switches correspond to the tuple data input (L-R):
      Switches 1 & 2: Value of x (2 bits)
      Switches 3 & 4: Value of y ''
      Switches 5 & 6: Value of p ''
      Switches 7 & 8: Value of t ''

    It utilizes a mux that output the original input tuple only if p is 01 (high event). 
    The output tuple is then stored in a 8-bit wire bus to store the tuple, the bus will output corresponding to each parameter
    if the polarity is high. If polarity is anything other than "1", the tuple will output as 8'b0.
      

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Switches (L-R) 5 & 6 corresponds to the input value of the polarity of the tuple.
      If a high event is wanted - switch 5 should be low and switch 6 should be high. 
        This will cause the chip to output the tuple set from all the switches.

      If a low event is wanted = switch 5 can be low or high, and switch 6 should be high. 
        (Note* switch 6 can be low only and only if switch five is high simultaneously)


# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - bit 1 of x
    - bit 0 of x
    - bit 1 of y
    - bit 0 of y
    - bit 1 of p - no real use
    - toggles event to be passed through if high
    - bit 1 of t
    - bit 0 of t
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - bit 1 of x
    - bit 0 of x
    - bit 1 of y
    - bit 0 of y
    - bit 1 of p
    - bit 0 of p
    - bit 1 of t
    - bit 0 of t
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - Unused
    - Unused
    - Unused
    - Unused
    - Unused
    - Unused
    - Unused
    - Unused
# The following fields are optional
  tag:          "timer, test"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      "nerfect"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     10000000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
