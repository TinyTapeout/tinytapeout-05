--- 
# Tiny Tapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - lif.v
    - tt_um_adaptive_lif.v
  top_module:  "tt_um_adaptive_lif"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Ruhai Lin"      # Your name
  title:        "Leaky-Integrated Fire Neuron"      # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Adaptive LIF Neuron"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      When a LIF (Leaky - Integrate and Fire) neuron integrates enough current stimulation, 
      it will be activated and Fire once spike. This current is introduced by the 8-bit chip input pin, but while integrating, 
      the LIF neuron gradually loses the previously accumulated current like an hourglass, 
      so it is called Leaky. this module implements this biological behavior with a mathematical equation. 
      The state of the neuron can be monitored externally through the 8-bit chip output pins.

      The LIF neuron module also includes adaptive threshold and adaptive decay rate to 
      dynamically adjust its own fire threshold or decay rate. The adaptive threshold can be enabled by 
      setting bit 0 of the bidirectional IO, and the adaptive decay rate can be enabled by setting bit 1 of the bidirectional IO. 
      simulations show that this allows the LIF neuron to enhance the sparsity of spikes while preserving the input features, 
      which improves the efficiency of the chip.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      LIF neurons will receive current inputs in three different gears (strong, medium, and weak). 
      The spike rate should be higher when the current is stronger and lower when the current is weaker. 
      After turning on adaptive threshold and adaptive decay rate the chip needs to retain this feature 
      while trying to enhance sparsity to avoid neurons that fire frequently or not at all, 
      to make it consistent with realistic biological characteristics.

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - current bit 11
    - current bit 12
    - current bit 13
    - current bit 14
    - current bit 15
    - current bit 16
    - current bit 17
    - current bit 18
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - membrane a
    - membrane b
    - membrane c
    - membrane d
    - membrane e
    - membrane f
    - membrane g
    - membrane h
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - adaptive_threshold_enable bit 0
    - adaptive_beta_enable bit 1
    - second counter bit 2
    - second counter bit 3
    - second counter bit 4
    - second counter bit 5
    - second counter bit 6
    - spike bit 7

# The following fields are optional
  tag:          "LIF neuron, SNN"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      "birdboss"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     10000000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
