--- 
# Tiny Tapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
  - TopModule.v
  - tt_um_diadatp_spigot_e.v

  top_module:  "tt_um_diadatp_spigot_e"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "diadatp"      # Your name
  title:        "e Spigot"      # Project title
  language:     "SpinalHDL" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Spigot algorithm for calculating the digits of e"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: >
      This project implements a bounded spigot algorithm for calculating the digits (currently 31) of e. While there are many ways to calculate the digits of transcendental numbers like e or pi, this spigot algorithm has much lower memory requirements. It however only produces a single digit at a time, and the number of digits produced is precommited at the time of design. For calculating n digits, the algorithm needs at least (n+1) storage locations. Each digit requires (n+1) calculation steps, repeated (n-1) times producing (n-1) digits (first digit 2 is not counted). Each calculation step requires a constant multiply, an add and a divide with remainder.
      
      There are many optimizations needed to fit as many digits as possible into a 1x1 tile. The biggest contributor is the storage elements. Some quick modeling revealed that the storage elements need to be about as wide as log(n).
      
      The calculation step hardware is shared across all iterations.

      The intermediate results are never needed outside each calculation and are never stored in memory.

      The memory access is such that each location is read and written to before moving on to the next.

      The memory access pattern removes the need for address decoding, replaced with a massive ring of gated shift registers.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      The digits are output on the bidirectional port and the output port in BCD (Binary-coded decimal). A BCD to seven segment decoder will be needed to display the digits. A clock below 500Hz should allow one to see the digits slide across the segment displays.

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - none
    - none
    - none
    - none
    - none
    - none
    - none
    - none
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - digit_2[0]
    - digit_2[1]
    - digit_2[2]
    - digit_2[3]
    - digit_3[0]
    - digit_3[1]
    - digit_3[2]
    - digit_3[3]
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - digit_0[0]
    - digit_0[1]
    - digit_0[2]
    - digit_0[3]
    - digit_1[0]
    - digit_1[1]
    - digit_1[2]
    - digit_1[3]

# The following fields are optional
  tag:          "math, experiment, animation"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "4 x 7447 decoders"      # Describe any external hardware needed
  discord:      "diadatp"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     "https://github.com/diadatp/tt05_spigot_e/blob/main/README.md"      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     350       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
