---
# Tiny Tapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here.
# Source files must be in ./src and you must list each source file separately
  source_files:
    - stream_cipher.sv
#    - decoder.v
  top_module:  "tt_um_Fiona_CMU"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation:
  author:       "Fiona Fisher"                                                          # Your name
  title:        "Stream Cipher w/ LSR"                                                  # Project title
  language:     "SystemVerilog"                                                         # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Uses a stream cipher and linear shift register to encrypt a message."  # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      Holds an internal linear shift register of eight bytes.

      When encrypting, each increment of IO_0 takes in the byte currently on the inputs, XORs it with the most recent byte stored in the LSR, and then puts it into the LSR.

      When not encrypting, the message can be viewed by putting an index zero to seven on the inputs. The output will either be the encrypted message or the decrypted message, based on I0_2.

      The LSR can only be reset with the rst_n signal. If more than sixteen bytes are inputted into the LSR without resetting, encrypted bytes will be lost, meaning the decryption of the last byte will not be accurate.

      You can toggle between encryption and viewing the message with IO_1. You do not have to finish inputting the message before viewing the current encryption.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Set IO_1 to high to indicate encryption. Place a number on the input. Set the IO_0 to high to put it into the LSR. Set the IO_0 to low before adding the next number. Repeat up to seven times.

      Set IO_1 to low to view the message. Use IO_2 to toggle between viewing the message encrypted (high) or decrypted (low). Use the input to indicate the index of the message you want to view.

      Reset to place a new message on the LSR.
# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:
    - bit0
    - bit1
    - bit2
    - bit3
    - bit4
    - bit5
    - bit6
    - bit7
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - bit0
    - bit1
    - bit2
    - bit3
    - bit4
    - bit5
    - bit6
    - bit7
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - inc    (indicate that input to encryption is valid)
    - encrypt
    - view   (high shows encrypted message, low shows decrpted message)
    - none
    - none
    - none
    - none
    - none

# The following fields are optional
  tag:          "encryption"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
