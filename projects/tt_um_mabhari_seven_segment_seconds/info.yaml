--- 
# Tiny Tapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - tt_um_seven_segment_seconds.v
    - decoder.v
    - BCD_Counter.v
    - Clock_Divider.v
    - Seconds_Timer.v
  top_module:  "tt_um_mabhari_seven_segment_seconds"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Morteza Biglari-Abhari"      # Your name
  title:        "Simple_Timer-MBA"      # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Count up to the specified value (between 01 to 99), one second at a time. Time_Out will be '1' when reaches the expected value"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      This is a two-digits timer, which can count from 00 to 99 in seconds. The time to stop counting is 
      given through 8 input switches (ui_in) as two BCD numbers (which can be from 00 to 99). This number 
      is loaded into an internal register when input Load is '1'. Then when input Start is '1' the counting
      begins. The timer stops when it reaches the specified count number and then output Time_Out will become '1'. 
      Seconds (either Ones or Tens) is displayed on 7-Seg display depending on uio_in[3].
      
# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      After reset, when Start and Load inputs are activated the counter should increase by one every second with a 10MHz input clock.
      Experiment by changing the inputs to count different number of seconds

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - Timeout (in Seconds) bits 7 to 0 
    
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - segment a
    - segment b
    - segment c
    - segment d
    - segment e
    - segment f
    - segment g
    - dot
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - Load bit 0 (uio_in[0])
    - Start bit 1 (uio_in[1])
    - Tens or Ones select bit 3 (uio_in[3])
    - Time_Out uio_out[7]

# The following fields are optional
  tag:          "seconds timer"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     10000000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
