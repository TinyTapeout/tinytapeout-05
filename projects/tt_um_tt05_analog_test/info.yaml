--- 
# Tiny Tapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
#    - counter.v
#    - decoder.v
  top_module:  "tt_um_tt05_analog_test"

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Harald Pretl and Jakob Ratschenberger"
  title:        "TT05 Analog Testmacro (Ringo, DAC)"
  language:     "Analog"
  description:  "For future analog enablement of TinyTapeout we designed a few simple analog blocks for testing the flow. The first block is a ca. 500kHz ring oscillator outputting a square-wave signal. The second block is a 3bit R-2R DAC outputting a programmable dc voltage. Both analog output signals can be gated or shorted using integrated transmission gates. To add a further level of madness, we have placed and routed this analog macro using an experimental automatic analog PnR tool, currently under development by the authors."

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      A ring oscillator (ca. 500kHz) produces a square-wave signal available at UA[0].
      A 3-bit R-2R DAC produces a dc voltage availabel at UA[1].

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Enable the respective blocks, and enable the transmission gates to connect the block outputs to UA[0] and UA[1], respectively. The DAC voltage can be changed by setting the digital inputs accordingly.

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - IN[2:0]: Digital input for DAC
    - IN[3]: Enable TG for DAC output to UA[1]
    - IN[4]: Not used
    - IN[5]: Enable TG for ringo output to UA[0]
    - IN[6]: Enable ringo 
    - IN[7]: Short UA[0] and UA[1] for testing
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - UA[0]: Ringo output (if TG enabled)
    - UA[1]: DAC output (if TG enabled
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - not used

# The following fields are optional
  tag:          "analog"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "scope, multimeter"      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
