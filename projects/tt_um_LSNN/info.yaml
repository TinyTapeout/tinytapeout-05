--- 
# Tiny Tapeout project information
project: 
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - tt_um_LSNN.v
    - tb.v

  top_module:  "tt_um_LSNN"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Skye Gunasekaran"      # Your name
  title:        "Spiking LSTM Network"      # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "A leaky integrate and fire neuron with adaptive threshold."      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      A Leaky Integrate-and-Fire (LIF) neuron is a simple mathematical model used in 
      neuroscience and computational neuroscience to describe the behavior of individual neurons. 
      It provides a simplified yet effective way to simulate the behavior of real neurons. In the
      neuron, there are two key elements: the current and the threshold. If the current surpasses
      the threshold, a spike is emitted, otherwise, the spike is 0 (resting). In this spiking LSTM 
      implementation, the neuron's threshold is adaptive, and will increase when the threshold is
      passed. When the neuron fails to reach the threshold, it will slowy decay back to the initial
      threshold.  

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      After applying the reset, the variables should be initialized, and a current can be applied.
      The testbench will record the current, threshold, and spiking behavior of the neuron.
      When a higher current is applied, you can see how the threshold increases, and vice versa when
      a spike is not emitted.

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - clk     Clock input
    - rst_n   Reset signal
    - ui_in   Voltage current
    - ena     Unused

# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - uo_out  Spike output

# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - uio_in  Unused 
    - uio_out Threshold
    - uio_oe  Unused

# The following fields are optional
  tag:          # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  # Describe any external hardware needed
  discord:      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     # Clock frequency in Hz (if required)
  picture:      # relative path to a picture in your repository (must be 512kb or less)
