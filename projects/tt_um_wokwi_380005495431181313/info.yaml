--- 
# Tiny Tapeout project information
project:
  wokwi_id:    380005495431181313    # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
#  source_files:        
#    - counter.v
#    - decoder.v
#  top_module:  "tt_um_example"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Hendrik"                # Your name
  title:        "Water Pump Controller"  # Project title
  language:     "Wokwi"                  # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Controller for a camping van water pump with multiple tap switches and timer" # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      The water pump controller is intended to replace the wiring based water pump system of typical camping vans with a bathroom
      and a kitchen and addresses some problems these systems can have.
      
      In such a system, water taps are usually equipped with switches that signal the need for water as soon as the tap is slightly
      opened so that a pump can be activated to pressurize the pipes.
      
      The controller has six inputs so that each tap (e.g sink in the kitchen, sink in the bathroom, toilet flushing, shower in
      bathroom, external shower) can use a dedicated input. It has another input for a high pressure switch that
      would turn off the pump if the pressure rises when all taps are actually closed.

      The main feature is a timer that can give an reminder using a buzzer when the water is running for an untypically long period
      and automatically switch off the pump at some point as well. When the switch off time was reached the buzzer signal can help to
      indicate which switch is still active.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      For testing the circuit, the outputs (including the pump output) can be connected to LEDs or as in the test board
      to a 7-segment display. In the test board the pump output corresponds to the top segment. The inputs can be connected
      to DIP switches. The clock should be set to 32768 Hz (2^15 Hz). The reset signal should provide a power-on reset and
      optionally a manual reset that might be handy for testing. In the minimal setup, the last three bidirectional I/O pins should be
      connected via separate resistors to GND. Connecting them directly to GND should be okay as well for a quick test. The pins can be
      outputs that should only be driven to low in this case, but do not connect them directly to VCC. The other I/O pins can be left
      open or connected to GND to avoid floating pins. The connection to GND can be done directly or via pull-down resistors to plan
      ahead for more tests with additional circuitry.

      The first test is about enabling the pump while not making use of the timer:
      
      - Keep the input 6 (DIP 7) low to disable the timer
      - Keep the input 7 (high pressure switch) low 
      - Set any combination of tap switches (inputs 0 - 5) high
      - The pump output (top segment) should be on
      - The pump LED and ActiveNormal LED (right hand segments) should be on
      - With all tap switches off all outputs should be off as well

      The second test is to verify the high pressure switch:

      - Set input 7 (the high pressure switch) high
      - Set any combination of tap switches high
      - Select any state for the timer enable pin (input 6)
      - The pump output should be off
      - The pump LED, ActiveLEDs and buzzer can be on, depending on the state of the controller

      A simple test for the timer with default values:
      
      - Set input 6 high to enable the timer feature
      - Keep input 7 low to see the pump output
      - Set any combination of tap switches (input 0 - 5) high
      - Wait
      - After 128s, the LEDs outputs should change from ActiveNormal to ActiveWarning
        (bottom right to bottom on the 7-segment display) and the RunLong LED (top left
        for 7-segment display) should be activated
      - At the same time the buzzer should be activated every two seconds. LEDs would blink
        dim (center segment).
      - After another 32s, the pump and pump LED should be turned off and the other LEDs should
        go from ActiveWarning to ActiveHalted (bottom to bottom left segment).
      - The buzzer should emit a sequence corresponding to the first active tap input every 16
        seconds. Again for LEDs that would be a dim blinking sequence every 16s.
      - Set all tap switches to low
      - All outputs should be off
      - Activate any tap switch 
      - Pump (and related LEDs) should be on again, buzzer should be off

      Testing the configuration feature requires additional external circuits. Please refer to
      the testing section of the README of the github project
      (https://github.com/fahek/water-pump-controller-tto5#more-advanced-tests).
    
# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - TapA
    - TapB
    - TapC
    - TapD
    - TapE
    - TapF
    - EnableTimeout
    - PressureHigh
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - Pump
    - PumpEnabled
    - ActiveNormal
    - ActiveWarning
    - ActiveHalted
    - RunLong
    - Buzzer
    - none
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - CFG0
    - CFG1
    - CFG2
    - CFG3
    - CFG4
    - TimerScaleConfig
    - WarningTimeConfig
    - TimeoutConfig

# The following fields are optional
  tag:          "utility, timer"  # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "32768Hz clock (does not need to be prcise, actually), power on reset, controlled water supply system (tap switches, pump), optionally LEDs and Buzzer for controller states"      # Describe any external hardware needed
  discord:      "henner0207"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     "https://github.com/fahek/water-pump-controller-tto5/blob/main/README.md"      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     32768   # Clock frequency in Hz (if required)
  picture:      "./drawings/wpc_system_sketch.png"      # relative path to a picture in your repository (must be 512kb or less)
