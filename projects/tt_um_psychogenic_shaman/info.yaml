--- 
# Tiny Tapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - tt_um_psychogenic_shaman.v
  top_module:  "tt_um_psychogenic_shaman"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "8x2"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Pat Deegan, psychogenic.com"      # Your name
  title:        "Shaman: SHA-256 hasher"      # Project title
  language:     "Amaranth" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Generate a SHA256 digest for data of arbitrary length"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      This implements the SHA-256 digest to create hashes of the data you feed in.  It is a naive, mostly unoptimized, implementation
      of the algorithm (though you can interleave data input while it's processing, using parallel mode, if you respect busy).
      
      Data is fed into the system in 64 byte blocks.  The hash is available after each 64 byte block has been input (allowing for
      some cycles to finish processing).
      
      The process is to:
      
        - toggle start, to reset the digest
        - put data byte on the databyte input (the "in" port)
        - wait until busy is de-asserted (if required)
        - clock the clockin_data pin
      
      After each complete block, the digest will become available after some clocks.  In short if
      
        - busy is not asserted; and
        - result_ready goes high
      
      The first hash byte will be available on the out port.  To get the next bytes, clock result_next and read the port.
      
      Parallel mode allows you to start feeding in more input data while the system is still processing the previous 
      block.  You need to pay attention to and respect "busy", here, or things will get badly munged.  
      Also, in parallel mode, you need to hold the clockin_data for an extra cycle when you bring it high.
      
      Pinout looks a little weird but it is hoped this will be a nice match for the PMOD arrangement on the demo boards.
      
      NOTES
      
      It does NOT massage the input data into suitable blocks. Messages need to be appended with an 0x80 byte, padded 
      such that the entire thing, along with an 8 byte suffix containing the length (big end), is a multiple of 512 
      bits (64 bytes). You can see this in action in the message_to_blocks() function, in test.py.
      
      I don't think it's super fast but, in parallel mode, I *think* simulation indicates it takes on the order of 8.3 microseconds
      per byte using a 1MHz system clock.  So, if we could feed this say a 50MHz clock, we'd get down to 166 ns/byte.  
      That's only on the order of 6 megabytes per second, I dunno maybe 100x slower than my laptop, but my 
      laptop doesn't run on a 50MHz clock and whatevs: should do the job if it holds in realy life.  All this 
      is when processing longer messages, to swamp out the minor overhead of setup etc.
      
      When loading input data, if using parallel mode, hold clockin_data for an extra system clock.  So
      
        - data byte on inputs
        - clockin_data HIGH
        - hold one system clock
        - clockin_data LOW
        - ... loop for next byte
      
      
      

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Might be good to run the cocotb test to get VCDs if you really want to see it in action.  But we want to play with hardware!
      So... There will be a python script in the repository to convert any content into the expected 512 bit blocks of bytes
      padded and everything to make the system happy.
      
      With that list of bytes in hand, this should work nicely:
      
        1) hold n_reset low for a few clock cycles
        2) bring n_reset high, and give it a few cycles
        3) start a new message digest my clocking start (bring high for one cycle, then low)
        4) for each block in your message
            - while "busy" is HIGH, wait a bit and check again
            - for each byte in that block
              - put the byte on in port (dedicated input pins)
              - while "busy" is HIGH, wait a bit and check again
              - bring clockin_data HIGH
              - if using parallel mode, hold for an extra clock cycle 
              - bring clockin_data LOW
              
      Check and wait until "busy" is LOW and "result_ready" goes HIGH.
      Your first result byte will already be present on the output port.
      Grab it and stash it.
      Then, for the next 31 bytes:
        bring result_next HIGH
        hold it there for one clock cycle
        bring result_next LOW
        grab and stash the byte on output pins
      
      If the hash is going to be, say "90fc0a268f8b81b...", they'll be present in that order
      0x90, then 0xfc, then 0x0a etc
      

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - data_input bit 0
    - data_input bit 1
    - data_input bit 2
    - data_input bit 3
    - data_input bit 4
    - data_input bit 5
    - data_input bit 6
    - data_input bit 7
    
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - result_byte bit 0
    - result_byte bit 1
    - result_byte bit 2
    - result_byte bit 3
    - result_byte bit 4
    - result_byte bit 5
    - result_byte bit 6
    - result_byte bit 7
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - OUTPUT, result_ready 
    - OUTPUT, begin processing data debug 
    - INPUT,  parallel loading enable 
    - INPUT,  result_next 
    - OUTPUT, busy 
    - OUTPUT, processing data block debug
    - INPUT,  start new digest 
    - INPUT,  clockin_data

# The following fields are optional
  tag:          "hash, sha, sha256, digest"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "An MCU or something to feed in the bytes and receive the results"      # Describe any external hardware needed
  discord:      "psychogenictech"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     "README.md"      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     10000000       # Clock frequency in Hz (if required)
  picture:      "img/shaman-logo.jpg"      # relative path to a picture in your repository (must be 512kb or less)
