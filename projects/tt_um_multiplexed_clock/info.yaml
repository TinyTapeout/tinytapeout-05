--- 
# Tiny Tapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - tt_um_multiplexed_clock.v
  top_module:  "tt_um_multiplexed_clock"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Gustavo Gomez"          # Your name
  title:        "Multiplexed clock"      # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Multiplexed clock with buttons"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      Basically this is a clock that counts minutes shows the hours in the 24-hour format, it uses the dot in the 7 segments to indicate 15s 30s 45s and 60s respectibly.

      ```
           -- 0 --         -- 0 --         -- 0 --         -- 0 --   
          |       |       |       |       |       |       |       |  
          5       1       5       1       5       1       5       1  
          |       |       |       |       |       |       |       |  
           -- 6 --         -- 6 --         -- 6 --         -- 6 --   
          |       |       |       |       |       |       |       |  
          4       2       4       2       4       2       4       2  
          |       |       |       |       |       |       |       |  
           -- 3 --  :60s   -- 3 --  :45s   -- 3 --  :30s   -- 3 --  :15s
              ↑               ↑               ↑               ↑    
            Hours H         Hours L         Minutes H       Minutes L
          uio_out[3]      uio_out[2]       uio_out[1]      uio_out[0]     
      ```

      [6:0] of the seven segments are connected to the **uo_out** output and the 7 bit is for the dot of the seven sevements.
      The digist are multiplexed, each digit is shown 1ms, those pins are **uio_out[3:0]** and **uio_out[5:4]** are used for debuging showing the clock of the seconds and minutes.

      For the test i have used [this 7 segment](https://www.tme.eu/es/details/kw4-804cgb/7-segment-led-displays/luckylight/?utm_campaign=compare-2019-08&utm_medium=cpc&utm_source=findchips.com) with common Cathode. But you can use which ever 7 segmnet display of 4 digits common or anode thats to the pins **ui_in[3:2]** with are use to negate the 7 segmetents or the multixplexing. 
      Finally, **ui_in[1:0]** are used with a button to increase the hours or minutes.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      I have selected a clock 32,768khz because i thought it will be easy to buy a ready commponent that generates a squera wave with that frecuency, we will see about that :stuck_out_tongue_closed_eyes:.
      Just connect the 7 segments to the **uo_out** pins and select your configuration anode or catothe with the **ui_in[3]** pin.
      For the multiplexing connected uio_out[3:0] to the digits as show in how to use drawing.

      And finally if you want to increase the numbers connect a button pull up to the pins **ui_in[1:0]** to increase hours or minutes.

      Generate a reset to start to init all the registers.

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - pull up button that increases minutes
    - pull up button that increases hours
    - pin used to negate 7 segment ouputs if necesary / for catode or anode configurations
    - pin used to negate 4 pins to multiplex if necesary / for catode or anode configurations
    - not used
    - not used
    - not used
    - not used
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - segment a
    - segment b
    - segment c
    - segment d
    - segment e
    - segment f
    - segment g
    - dot
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - output multiplex first digit
    - output multiplex second digit
    - output multiplex third digit
    - output multiplex forth digit
    - output clock of seconds / testing purposes
    - output clock of minutes / testing purposes
    - output not used
    - output not used

# The following fields are optional
  tag:          "clock"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "7 segment 4 digits multiplexed"      # Describe any external hardware needed
  discord:      "noteolvides"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     "https://github.com/Noteolvides/Noteolvides_clock_TinyTapeout/blob/main/README.md"      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     32728       # Clock frequency in Hz (if required)
  picture:      "images/tang_nano_clock.jpg"      # relative path to a picture in your repository (must be 512kb or less)
