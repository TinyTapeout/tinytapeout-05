--- 
# Tiny Tapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - tt_um_hh.v
    - hh.v
    - hh_state.v
  top_module:  "tt_um_hh"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "4x2"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Jason Eshraghian"      # Your name
  title:        "Hodgkin-Huxley Neuron"      # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Implement a Hodgkin-Huxley neuron in silicon."      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      Apply an input current injection to the LIF neuron.
      This will modify a neuron membrane potential, and with sufficient current injection, will cause periodic action potentials.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      After reset, all state variables will be initialized. A minimum of 2 clock cycles of reset is needed.
      
      An 8-bit input current is then applied to uio_in. The current is treated as the LSB of a 16-bit signal by concatenating 8x0's to the front.
      The first bit is a sign bit, the following 8-bits are treated as the whole number while the final 7-bits are the fraction.
      The current is interpreted in dimensions of uA/cm^2.
      This means the maximum value that can be represented is 1.992 uA/cm^2.

      The membrane potential of the neuron will respond accordingly. Larger currents will elicit more firing. 
      Simulations show that the neuron will start firing, reach a steady state where it stops firing in absence of input stimulus, and start firing again if the current exceeds approximately 8'b00001100 = 8'd12.

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - current bit 11
    - current bit 12
    - current bit 13
    - current bit 14
    - current bit 15
    - current bit 16
    - current bit 17
    - current bit 18
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - membrane potential bit a
    - membrane potential bit b
    - membrane potential bit c
    - membrane potential bit d
    - membrane potential bit e
    - membrane potential bit f
    - membrane potential bit g
    - membrane potential bit h

# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - membrane potential output bit i
    - membrane potential fractional output bit j
    - membrane potential fractional output bit k
    - membrane potential fractional output bit l
    - membrane potential fractional output bit m
    - membrane potential fractional output bit n
    - membrane potential fractional output bit o
    - membrane potential fractional output bit p

# The following fields are optional
  tag:          "neuron, test"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ".jasnn"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     20000000      # Clock frequency in Hz (if required)
  picture:      "hh-fig.png"      # relative path to a picture in your repository (must be 512kb or less)