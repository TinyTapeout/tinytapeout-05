---
# Tiny Tapeout project information
project:
  wokwi_id: 0 # If using wokwi, set this to your project's ID

  # If using an HDL, set wokwi_id as 0 and uncomment and list your source files here.
  # Source files must be in ./src and you must list each source file separately
  source_files:
    - tt_um_muncherkin_lioncage.v
    - decoder.v
  top_module: "tt_um_muncherkin_lioncage" # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

  # How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1" # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation:
  author: "Axel Andersson & Per Andersson" # Your name
  title: "Lion cage" # Project title
  language: "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description: "Count up to 15 lions, moving through a tunnel between a cage and an enclosure." # Short description of what your project does

  # Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
    Two sensors are set in the tunnel. The sensor closest to the cage is G1,
    the other G2. Only one lion can walk through the tunnel at a time. A lion 
    is allowed to reverse in the tunnel. 

    As the lion starts walking out, (G1, G2) = (1, 0), the counter increments by 1.
    One of two scenarios then occurs: either the sensors read (G1, G2) = (0, 0) before it 
    reads (G1, G2) = (0, 1). In that case, the counter will decrement as the lion must have gone 
    back into the cage. Otherwise, the sensors will read (G1, G2) = (0, 1) before it reads 
    (G1, G2) = (0, 0), thereby letting us know that it has passed (G1, G2) = (1, 1) as well. The 
    counter will not change in this case.

    If we read (G1, G2) = (1, 1) before reading (G1, G2) = (1, 0), we know a lion is moving from the 
    enclosure to the cage. We then repeat the above two cases. This allows us to create a two 
    state graph of the problem, transitioning from S0 to S1 on either (G1, G2) = (1, 0) or
    (G1, G2) = (1, 1) and returning back on (G1, G2) = (0, 1) or (G1, G2) = (0, 0), incrementing 
    the counter if S0->S1 on (G1, G2) = (1, 0) and decrementing the counter if S1->S0 on 
    (G1, G2) = (0, 0).

  # Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test: |
    After reset, the counter should increase by 1 if a lion moves from the cage to the enclosure, and the opposite if 
    vice versa.

  # A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:
    - G1, first sensor in tunnel
    - G2, second sensor in tunnnel
  # A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - segment a
    - segment b
    - segment c
    - segment d
    - segment e
    - segment f
    - segment g
  # A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - They do nothing.

  # The following fields are optional
  tag: "timer, test" # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw: "" # Describe any external hardware needed
  discord: "" # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link: "" # URL to longer form documentation, eg the README.md in your repository
  clock_hz: 10000000 # Clock frequency in Hz (if required)
  picture: "" # relative path to a picture in your repository (must be 512kb or less)
