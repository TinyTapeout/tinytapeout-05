--- 
# Tiny Tapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - tt_um_chip_rom.v
  top_module:  "tt_um_chip_rom"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Uri Shaked" # Your name
  title:        "Chip ROM"   # Project title
  language:     "Verilog"        # other examples include Verilog, Amaranth, VHDL, etc
  description:  "ROM with information about the chip"   # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      ROM memory that contains information about the Tiny Tapeout chip. The ROM is 8-bit wide and 128 bytes long.

      ## The ROM layout

      The ROM layout is as follows:

      | Address | Length | Encoding  | Description                              |
      | ------- | ------ | --------- | ---------------------------------------- |
      | 0       | 8      | 7-segment | Shuttle name (e.g. "tt05"), null-padded  |
      | 8       | 8      | 7-segment | Git commit hash                          |
      | 32      | 96     | ASCII     | Chip descriptor (see below)              |

      ## The chip descriptor

      The chip descriptor is a simple null-terminated string that describes the chip.
      Each line is a key-value pair, separated by an equals sign. It contains the following keys:

      | Key     | Description                   | Example value              |
      | ------- | ----------------------------- | -------------------------- |
      | shuttle | The identifier of the shuttle | tt05                       |
      | repo    | The name of the repository    | TinyTapeout/tinytapeout-05 |
      | commit  | The commit hash \*            | a1b2c3d4                   |

      \* The commit hash is only included for Tiny Tapeout 5 and later.

      Here is a complete example of a chip descriptor:

      ```
      shuttle=tt05
      repo=TinyTapeout/tinytapeout-05
      commit=a1b2c3d4
      ```

      ## How the ROM is generated

      The ROM is automatically generated by [tt-support-tools](https://github.com/TinyTapeout/tt-support-tools) 
      while building the final GDS file of the chip. Look at the `rom.py` file in the repository for more details.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Read the ROM contents by setting the address pins and reading the data pins. 
      The first 16 bytes of the ROM are 7-segment encoded and contain the shuttle name and commit hash.
      You can read them by toggling the first four DIP switches and observing the on-board 7-segment display.

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - addr[0]
    - addr[1]
    - addr[2]
    - addr[3]
    - addr[4]
    - addr[5]
    - addr[6]
    - addr[7]
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - data[0]
    - data[1]
    - data[2]
    - data[3]
    - data[4]
    - data[5]
    - data[6]
    - data[7]
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - none
    - none
    - none
    - none
    - none
    - none
    - none
    - none

# The following fields are optional
  tag:          "rom"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      "urish"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
